apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

group = 'com.nablarch.workflow'
version = '5u10'
description = 'ワークフローライブラリサンプルアプリケーション'

sourceCompatibility = 1.6

buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:2.2.3"
    classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
  }
}

ext {
  encoding = 'utf-8'
}

apply {
  plugin 'com.nablarch.dev.nablarch-sonarqube'
  plugin 'com.nablarch.dev.nablarch-build'
  plugin 'com.nablarch.dev.nablarch-maven-deploy'
  from 'https://github.com/nablarch/nablarch-gradle-plugin/blob/develop/scripts/cobertura/cobertura-0.0.1.gradle?raw=true'
  plugin "io.spring.dependency-management"
}

repositories {
  mavenLocal()
  maven { url "${developLibUrl}" }
  jcenter()
  
  // サードパーティ製ライブラリの格納リポジトリ
    if(project.hasProperty('nablarchExtRepoUrl')) {
       maven { url "${nablarchExtRepoUrl}" }
  }
}
dependencyManagement {
  imports {
    mavenBom 'com.nablarch.profile:nablarch-bom:5u10'
  }
  applyMavenExclusions false
}

dependencies {
  compile 'com.nablarch.framework:nablarch-fw-web'
  compile 'com.nablarch.framework:nablarch-fw-web-tag'
  compile 'com.nablarch.framework:nablarch-fw-batch'
  compile 'com.nablarch.framework:nablarch-common-date'
  compile 'com.nablarch.framework:nablarch-common-code'
  compile 'com.nablarch.framework:nablarch-common-exclusivecontrol'
  compile 'com.nablarch.framework:nablarch-common-code'
  compile 'com.nablarch.workflow:nablarch-workflow:1.1.0'

  runtime 'com.nablarch.framework:nablarch-common-code-jdbc'
  runtime 'com.nablarch.framework:nablarch-common-auth-jdbc'
  runtime 'com.nablarch.framework:nablarch-common-jdbc'
  runtime 'com.nablarch.framework:nablarch-common-exclusivecontrol-jdbc'

  testRuntime 'com.nablarch.framework:nablarch-fw-messaging'
  testRuntime 'com.nablarch.framework:nablarch-fw-messaging-http'
  testRuntime 'com.nablarch.framework:nablarch-fw-web-extension'
  testRuntime 'com.nablarch.framework:nablarch-common-dao'
  
  testCompile 'com.nablarch.framework:nablarch-testing'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  
  
  runtime 'com.oracle:ojdbc6:11.2.0.2.0'
  runtime 'com.oracle:ucp:11.2.0.3.0'
}

webAppDirName = "${projectDir}/src/main/web"
war {
  destinationDir = file("${projectDir}")
  archiveName = 'workflow-sample-application.war'
  from("${projectDir}/src/main/java") {
    into 'WEB-INF/classes'
    include '**/*.sql'
  }
  exclude 'tools/**'
  exclude '*.bat'
}

//------------------------------------------------------------------------------
// データベースのセットアップタスク
//------------------------------------------------------------------------------
if (hasProperty('db')) {
  ant.properties['db.url'] = project.db
}
if (hasProperty('databaseName')) {
  ant.properties['database.name'] = project.databaseName
}
if (hasProperty('sampleRoot')) {
  ant.properties['project.root'] = project.sampleRoot
}
if (hasProperty('sampleMain')) {
  ant.properties['project.main'] = project.sampleMain
  ant.properties['sql.lib.dir'] = project.sampleMain + '/web/WEB-INF/lib'
}
if (hasProperty('sampleTest')) {
  ant.properties['project.test'] = project.sampleTest
}
if (hasProperty('sampleTool')) {
  ant.properties['project.tool'] = project.sampleTool
}

ant.properties['project.main.classes'] = project.sourceSets.main.output.classesDir
ant.properties['project.test.classes'] = project.sourceSets.test.output.classesDir


def toolLibDir = "${buildDir}/toolLib/"

configurations {
  toolLib {
    extendsFrom testRuntime
  }
}
 
// ツール実行のためのライブラリを用意する。
task copyDependency(type:Copy) {
  
  // 既存のライブラリがあれば削除する。
  delete(toolLibDir) {
    from (configurations.toolLib)
    into toolLibDir
  }
}
  
task setupDb {
  inputs.files fileTree(dir: "${projectDir}/src/tool/db", include: '**/*')
  outputs.upToDateWhen { false }
  doLast {
    ant.ant(antfile: 'db_setup-build.xml', target: 'DB再セットアップ', inheritall: 'true', dir: project.file("${projectDir}/src/tool/db"))
  }
}
setupDb.dependsOn compileJava, compileTestJava, copyDependency
test.dependsOn setupDb
jettyRun.dependsOn setupDb

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}
